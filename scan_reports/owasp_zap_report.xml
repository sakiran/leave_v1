<?xml version="1.0"?><OWASPZAPReport version="2.9.0" generated="Sat, 20 Jun 2020 13:49:47">
<site name="http://secure.expert" host="secure.expert" port="80" ssl="false"><alerts><alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options Header Missing</alert>
  <name>X-Content-Type-Options Header Missing</name>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>&lt;p&gt;The Anti-MIME-Sniffing header X-Content-Type-Options was not set to &apos;nosniff&apos;. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.&lt;/p&gt;</desc>
  <instances>
  <instance>
  <uri>http://secure.expert/leave/php/userinfo.php</uri>
  <method>POST</method>
  <param>X-Content-Type-Options</param>
  </instance>
  <instance>
  <uri>http://secure.expert/leave/js/picker.js</uri>
  <method>GET</method>
  <param>X-Content-Type-Options</param>
  </instance>
  <instance>
  <uri>http://secure.expert/leave/js/apply.js</uri>
  <method>GET</method>
  <param>X-Content-Type-Options</param>
  </instance>
  <instance>
  <uri>http://secure.expert/leave/js/picker.date.js</uri>
  <method>GET</method>
  <param>X-Content-Type-Options</param>
  </instance>
  <instance>
  <uri>http://secure.expert/leave/php/login.php</uri>
  <method>POST</method>
  <param>X-Content-Type-Options</param>
  </instance>
  <instance>
  <uri>http://secure.expert/leave/php/applyleave.php</uri>
  <method>POST</method>
  <param>X-Content-Type-Options</param>
  </instance>
  <instance>
  <uri>http://secure.expert/leave/js/moment.js</uri>
  <method>GET</method>
  <param>X-Content-Type-Options</param>
  </instance>
  <instance>
  <uri>http://secure.expert/leave/php/approveclassincharge.php</uri>
  <method>POST</method>
  <param>X-Content-Type-Options</param>
  </instance>
  <instance>
  <uri>http://secure.expert/leave/php/userleavemanagementstatus.php</uri>
  <method>POST</method>
  <param>X-Content-Type-Options</param>
  </instance>
  </instances>
  <count>9</count>
  <solution>&lt;p&gt;Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to &apos;nosniff&apos; for all web pages.&lt;/p&gt;&lt;p&gt;If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.&lt;/p&gt;</solution>
  <otherinfo>&lt;p&gt;This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.&lt;/p&gt;&lt;p&gt;At &quot;High&quot; threshold this scanner will not alert on client or server error responses.&lt;/p&gt;</otherinfo>
  <reference>&lt;p&gt;http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx&lt;/p&gt;&lt;p&gt;https://owasp.org/www-community/Security_Headers&lt;/p&gt;</reference>
  <cweid>16</cweid>
  <wascid>15</wascid>
  <sourceid>3</sourceid>
</alertitem>
<alertitem>
  <pluginid>10098</pluginid>
  <alert>Cross-Domain Misconfiguration</alert>
  <name>Cross-Domain Misconfiguration</name>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>&lt;p&gt;Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server&lt;/p&gt;</desc>
  <instances>
  <instance>
  <uri>http://secure.expert/leave/php/userinfo.php</uri>
  <method>POST</method>
  <evidence>Access-Control-Allow-Origin: *</evidence>
  </instance>
  <instance>
  <uri>http://secure.expert/leave/php/applyleave.php</uri>
  <method>POST</method>
  <evidence>Access-Control-Allow-Origin: *</evidence>
  </instance>
  <instance>
  <uri>http://secure.expert/leave/php/login.php</uri>
  <method>POST</method>
  <evidence>Access-Control-Allow-Origin: *</evidence>
  </instance>
  <instance>
  <uri>http://secure.expert/leave/php/userleavemanagementstatus.php</uri>
  <method>POST</method>
  <evidence>Access-Control-Allow-Origin: *</evidence>
  </instance>
  <instance>
  <uri>http://secure.expert/leave/php/approveclassincharge.php</uri>
  <method>POST</method>
  <evidence>Access-Control-Allow-Origin: *</evidence>
  </instance>
  </instances>
  <count>5</count>
  <solution>&lt;p&gt;Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).&lt;/p&gt;&lt;p&gt;Configure the &quot;Access-Control-Allow-Origin&quot; HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.&lt;/p&gt;</solution>
  <otherinfo>&lt;p&gt;The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.&lt;/p&gt;</otherinfo>
  <reference>&lt;p&gt;http://www.hpenterprisesecurity.com/vulncat/en/vulncat/vb/html5_overly_permissive_cors_policy.html&lt;/p&gt;</reference>
  <cweid>264</cweid>
  <wascid>14</wascid>
  <sourceid>3</sourceid>
</alertitem>
<alertitem>
  <pluginid>10096</pluginid>
  <alert>Timestamp Disclosure - Unix</alert>
  <name>Timestamp Disclosure - Unix</name>
  <riskcode>0</riskcode>
  <confidence>1</confidence>
  <riskdesc>Informational (Low)</riskdesc>
  <desc>&lt;p&gt;A timestamp was disclosed by the application/web server - Unix&lt;/p&gt;</desc>
  <instances>
  <instance>
  <uri>http://secure.expert/leave/js/moment.js</uri>
  <method>GET</method>
  <evidence>123456789</evidence>
  </instance>
  </instances>
  <count>1</count>
  <solution>&lt;p&gt;Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.&lt;/p&gt;</solution>
  <otherinfo>&lt;p&gt;123456789, which evaluates to: 1973-11-30 03:03:09&lt;/p&gt;</otherinfo>
  <reference>&lt;p&gt;http://projects.webappsec.org/w/page/13246936/Information%20Leakage&lt;/p&gt;</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
  <sourceid>3</sourceid>
</alertitem>
<alertitem>
  <pluginid>40018</pluginid>
  <alert>SQL Injection</alert>
  <name>SQL Injection</name>
  <riskcode>3</riskcode>
  <confidence>2</confidence>
  <riskdesc>High (Medium)</riskdesc>
  <desc>&lt;p&gt;SQL injection may be possible.&lt;/p&gt;</desc>
  <instances>
  <instance>
  <uri>http://secure.expert/leave/php/login.php</uri>
  <method>POST</method>
  <param>password</param>
  <attack>password123&apos; AND &apos;1&apos;=&apos;1&apos; -- </attack>
  </instance>
  <instance>
  <uri>http://secure.expert/leave/php/login.php</uri>
  <method>POST</method>
  <param>username</param>
  <attack>keerthana&apos; AND &apos;1&apos;=&apos;1&apos; -- </attack>
  </instance>
  </instances>
  <count>2</count>
  <solution>&lt;p&gt;Do not trust client side input, even if there is client side validation in place.  &lt;/p&gt;&lt;p&gt;In general, type check all data on the server side.&lt;/p&gt;&lt;p&gt;If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by &apos;?&apos;&lt;/p&gt;&lt;p&gt;If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.&lt;/p&gt;&lt;p&gt;If database Stored Procedures can be used, use them.&lt;/p&gt;&lt;p&gt;Do *not* concatenate strings into queries in the stored procedure, or use &apos;exec&apos;, &apos;exec immediate&apos;, or equivalent functionality!&lt;/p&gt;&lt;p&gt;Do not create dynamic SQL queries using simple string concatenation.&lt;/p&gt;&lt;p&gt;Escape all data received from the client.&lt;/p&gt;&lt;p&gt;Apply a &apos;whitelist&apos; of allowed characters, or a &apos;blacklist&apos; of disallowed characters in user input.&lt;/p&gt;&lt;p&gt;Apply the principle of least privilege by using the least privileged database user possible.&lt;/p&gt;&lt;p&gt;In particular, avoid using the &apos;sa&apos; or &apos;db-owner&apos; database users. This does not eliminate SQL injection, but minimizes its impact.&lt;/p&gt;&lt;p&gt;Grant the minimum database access that is necessary for the application.&lt;/p&gt;</solution>
  <otherinfo>&lt;p&gt;The page results were successfully manipulated using the boolean conditions [password123&apos; AND &apos;1&apos;=&apos;1&apos; -- ] and [password123&apos; AND &apos;1&apos;=&apos;2&apos; -- ]&lt;/p&gt;&lt;p&gt;The parameter value being modified was NOT stripped from the HTML output for the purposes of the comparison&lt;/p&gt;&lt;p&gt;Data was returned for the original parameter.&lt;/p&gt;&lt;p&gt;The vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter&lt;/p&gt;</otherinfo>
  <reference>&lt;p&gt;https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html&lt;/p&gt;</reference>
  <cweid>89</cweid>
  <wascid>19</wascid>
  <sourceid>1</sourceid>
</alertitem>
<alertitem>
  <pluginid>10027</pluginid>
  <alert>Information Disclosure - Suspicious Comments</alert>
  <name>Information Disclosure - Suspicious Comments</name>
  <riskcode>0</riskcode>
  <confidence>1</confidence>
  <riskdesc>Informational (Low)</riskdesc>
  <desc>&lt;p&gt;The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.&lt;/p&gt;</desc>
  <instances>
  <instance>
  <uri>http://secure.expert/leave/js/moment.js</uri>
  <method>GET</method>
  </instance>
  <instance>
  <uri>http://secure.expert/leave/js/picker.js</uri>
  <method>GET</method>
  </instance>
  </instances>
  <count>2</count>
  <solution>&lt;p&gt;Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.&lt;/p&gt;</solution>
  <otherinfo>&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;    function copyConfig(to, from) {&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;        if (!isUndefined(from._isAMomentObject)) {&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;            to._isAMomentObject = from._isAMomentObject;&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;        if (!isUndefined(from._i)) {&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;            to._i = from._i;&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;        if (!isUndefined(from._f)) {&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;            to._f = from._f;&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;        if (!isUndefined(from._l)) {&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;            to._l = from._l;&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;        if (!isUndefined(from._strict)) {&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;            to._strict = from._strict;&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;        if (!isUndefined(from._tzm)) {&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;            to._tzm = from._tzm;&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;        if (!isUndefined(from._isUTC)) {&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;            to._isUTC = from._isUTC;&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;        if (!isUndefined(from._offset)) {&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;            to._offset = from._offset;&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;        if (!isUndefined(from._pf)) {&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;            to._pf = getParsingFlags(from);&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;        if (!isUndefined(from._locale)) {&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;            to._locale = from._locale;&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;                val = from[prop];&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;        // number + (possibly) stuff coming from _ordinalParseLenient.&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bTODO\b&lt;/p&gt;&lt;p&gt;        // TODO: add sorting&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bTODO\b&lt;/p&gt;&lt;p&gt;                // TODO: Another silent failure?&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bUSER\b&lt;/p&gt;&lt;p&gt;    // Setting the hour should keep the time, because the user explicitly&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;    // pick the locale from the array&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;    // substring from most specific to least, but move to the next array item if it&apos;s a more specific variant than the current root&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bTODO\b&lt;/p&gt;&lt;p&gt;        // TODO: Find a better way to register and load all the locales in Node&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;    // date from iso format&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;    // date from iso format or fallback&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;        //compute day of the year from weeks and weekdays&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;        // Apply timezone offset from input. The actual utcOffset can be changed&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bTODO\b&lt;/p&gt;&lt;p&gt;            // TODO: We need to take the current isoWeekYear, but that depends on&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;                // local weekday -- counting starts from begining of week&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;    // date from string and format string&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bTODO\b&lt;/p&gt;&lt;p&gt;        // TODO: Move this to another part of the creation flow to prevent circular deps&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;    // date from string and array of format strings&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;            // from milliseconds&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;    // Pick a moment m from moments so that m[fn](other) is true for all&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bTODO\b&lt;/p&gt;&lt;p&gt;    // TODO: Use [].sort instead?&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;        // Because of dateAddRemove treats 24 hours as different from a&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;    // Return a moment from input, that is local/utc/zone equivalent to model.&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;    // from the actual represented time. That is why we call updateOffset&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;        } else if (typeof duration === &apos;object&apos; &amp;&amp; (&apos;from&apos; in duration || &apos;to&apos; in duration)) {&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bTODO\b&lt;/p&gt;&lt;p&gt;    // TODO: remove &apos;name&apos; arg after deprecation is removed&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;    function isBetween (from, to, units, inclusivity) {&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;        return (inclusivity[0] === &apos;(&apos; ? this.isAfter(from, units) : !this.isBefore(from, units)) &amp;&amp;&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;    function from (time, withoutSuffix) {&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;            return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;        return this.from(local__createLocal(), withoutSuffix);&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;            return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;    momentPrototype__proto.from              = from;&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bTODO\b&lt;/p&gt;&lt;p&gt;    // TODO: Use this.as(&apos;ms&apos;)?&lt;/p&gt;&lt;p&gt;The following comment/snippet was identified via the pattern: \bFROM\b&lt;/p&gt;&lt;p&gt;    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</otherinfo>
  <reference>&lt;p&gt;&lt;/p&gt;</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
  <sourceid>3</sourceid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options Header Not Set</alert>
  <name>X-Frame-Options Header Not Set</name>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>&lt;p&gt;X-Frame-Options header is not included in the HTTP response to protect against &apos;ClickJacking&apos; attacks.&lt;/p&gt;</desc>
  <instances>
  <instance>
  <uri>http://secure.expert/leave/php/approveclassincharge.php</uri>
  <method>POST</method>
  <param>X-Frame-Options</param>
  </instance>
  <instance>
  <uri>http://secure.expert/leave/php/userleavemanagementstatus.php</uri>
  <method>POST</method>
  <param>X-Frame-Options</param>
  </instance>
  <instance>
  <uri>http://secure.expert/leave/php/login.php</uri>
  <method>POST</method>
  <param>X-Frame-Options</param>
  </instance>
  <instance>
  <uri>http://secure.expert/leave/php/applyleave.php</uri>
  <method>POST</method>
  <param>X-Frame-Options</param>
  </instance>
  <instance>
  <uri>http://secure.expert/leave/php/userinfo.php</uri>
  <method>POST</method>
  <param>X-Frame-Options</param>
  </instance>
  </instances>
  <count>5</count>
  <solution>&lt;p&gt;Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it&apos;s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it&apos;s part of a FRAMESET) then you&apos;ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).&lt;/p&gt;</solution>
  <reference>&lt;p&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options&lt;/p&gt;</reference>
  <cweid>16</cweid>
  <wascid>15</wascid>
  <sourceid>3</sourceid>
</alertitem>
<alertitem>
  <pluginid>10054</pluginid>
  <alert>Cookie Without SameSite Attribute</alert>
  <name>Cookie Without SameSite Attribute</name>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>&lt;p&gt;A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a &apos;cross-site&apos; request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.&lt;/p&gt;</desc>
  <instances>
  <instance>
  <uri>http://secure.expert/leave/php/login.php</uri>
  <method>POST</method>
  <param>PHPSESSID</param>
  <evidence>Set-Cookie: PHPSESSID</evidence>
  </instance>
  </instances>
  <count>1</count>
  <solution>&lt;p&gt;Ensure that the SameSite attribute is set to either &apos;lax&apos; or ideally &apos;strict&apos; for all cookies.&lt;/p&gt;</solution>
  <reference>&lt;p&gt;https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site&lt;/p&gt;</reference>
  <cweid>16</cweid>
  <wascid>13</wascid>
  <sourceid>3</sourceid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie No HttpOnly Flag</alert>
  <name>Cookie No HttpOnly Flag</name>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>&lt;p&gt;A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.&lt;/p&gt;</desc>
  <instances>
  <instance>
  <uri>http://secure.expert/leave/php/login.php</uri>
  <method>POST</method>
  <param>PHPSESSID</param>
  <evidence>Set-Cookie: PHPSESSID</evidence>
  </instance>
  </instances>
  <count>1</count>
  <solution>&lt;p&gt;Ensure that the HttpOnly flag is set for all cookies.&lt;/p&gt;</solution>
  <reference>&lt;p&gt;https://owasp.org/www-community/HttpOnly&lt;/p&gt;</reference>
  <cweid>16</cweid>
  <wascid>13</wascid>
  <sourceid>3</sourceid>
</alertitem>
</alerts></site></OWASPZAPReport>